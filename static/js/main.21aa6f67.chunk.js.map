{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","canvasRef","useRef","useState","width","setWidth","height","setHeight","rafId","setRafId","duration","setDuration","wasmState","useAsync","a","wasm","createWasmModule","useEffect","value","current","cancelAnimationFrame","_initialize","Date","now","console","log","outputImageBufferOffset","_getVisualizeBufferOffset","outImageData","ImageData","Uint8ClampedArray","HEAPU8","slice","getContext","putImageData","requestAnimationFrame","render","start","performance","_exec","stop","className","onChange","ev","val","target","xPos","indexOf","w","parseInt","substring","h","selected","toFixed","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+OAyFeA,MAzEf,WACE,IAAMC,EAAYC,iBAA0B,MAD/B,EAEaC,mBAAS,KAFtB,mBAENC,EAFM,KAECC,EAFD,OAGeF,mBAAS,KAHxB,mBAGNG,EAHM,KAGEC,EAHF,OAIaJ,mBAAwB,MAJrC,mBAINK,EAJM,KAICC,EAJD,OAKmBN,mBAAS,GAL5B,mBAKNO,EALM,KAKIC,EALJ,KAOPC,EAAYC,YAAQ,sBAAC,4BAAAC,EAAA,6DACnBC,EAAOC,mBADY,kBAElBD,GAFkB,4CA0C3B,OArCAE,qBAAU,WACR,GAAIL,EAAUM,OAASjB,GAAaA,EAAUkB,QAAS,CACvC,OAAVX,GACFY,qBAAqBZ,GAGvB,IAAMO,EAAOH,EAAUM,MACvBH,EAAKM,YAAYjB,EAAOE,EArBjB,EAqB+BgB,KAAKC,MAAQ,KACnDC,QAAQC,IAAI,mBAEZ,IAAMC,EAA0BX,EAAKY,4BAC/BC,EAAe,IAAIC,UAAU,IAAIC,kBAAkBf,EAAKgB,OAAOC,MAAMN,EAAyBA,EAzB7F,EAyBuHtB,EAAeE,EAzBtI,EAyBsJ,IAzBtJ,EAyB2JF,EAzB3J,EAyByKE,GACjKL,EAAUkB,QAClBc,WAAW,MAAOC,aAAaN,EAAc,EAAG,GAmBvDnB,EAAS0B,uBAbM,SAATC,IAAgB,IAAD,IACnB,GAAKxB,EAAUM,MAAf,CACA,IAAMH,EAAOH,EAAUM,MACjBmB,EAAQC,YAAYf,MAC1BX,EAAUM,MAAOqB,MAAMnC,EAAOE,EArCzB,GAsCL,IAAMsB,EAAe,IAAIC,UAAU,IAAIC,kBAAkBf,EAAKgB,OAAOC,MAAMN,EAAyBA,EAtC/F,EAsCyHtB,EAAeE,EAtCxI,EAsCwJ,IAtCxJ,EAsC6JF,EAtC7J,EAsC2KE,GAChL,UAAAL,EAAUkB,eAAV,mBAAmBc,WAAW,aAA9B,SAAqCC,aAAaN,EAAc,EAAG,GAEnE,IAAMY,EAAOF,YAAYf,MAEzBZ,EADa6B,EAAOH,GAEpB5B,EAAS0B,sBAAsBC,YAKlC,CAAChC,EAAOE,EAAQM,EAAWX,IAG5B,sBAAKwC,UAAU,MAAf,UACE,gCACE,yBAAQC,SAAU,SAAAC,GAChB,IAAMC,EAAMD,EAAGE,OAAO3B,MAChB4B,EAAOF,EAAIG,QAAQ,KACnBC,EAAIC,SAASL,EAAIM,UAAU,EAAGJ,IAC9BK,EAAIF,SAASL,EAAIM,UAAUJ,EAAO,IACxCtB,QAAQC,IAAIuB,EAAGG,GACf9C,EAAS2C,GACTzC,EAAU4C,IAPZ,UASE,wBAAQC,UAAQ,EAAhB,qBACA,+CACA,+CACA,kDAEF,iCAAO1C,EAAS2C,QAAQ,GAAxB,YAEF,wBAAQC,IAAKrD,EAAWG,MAtEjB,EAsEwBA,EAAcE,OAtEtC,EAsE8CA,QCtE5CiD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS5B,OACP,cAAC,IAAM6B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.21aa6f67.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport {useAsync} from 'react-use'\n\nexport interface Wasm extends EmscriptenModule {\n  _getInputBufferOffset(): number\n  _getOutputBufferOffset(): number\n  _getVisualizeBufferOffset(): number\n  _initialize(width: number, height: number, size: number, seed: number): void\n  _exec(width: number, height: number, size: number): number\n}\n\ndeclare function createWasmModule(): Promise<Wasm>\n\nconst size = 1\n\nfunction App() {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [width, setWidth] = useState(512)\n  const [height, setHeight] = useState(512)\n  const [rafId, setRafId] = useState<number | null>(null)\n  const [duration, setDuration] = useState(0)\n\n  const wasmState = useAsync(async () => {\n    const wasm = createWasmModule()\n    return wasm\n  })\n\n  useEffect(() => {\n    if (wasmState.value && canvasRef && canvasRef.current) {\n      if (rafId !== null) {\n        cancelAnimationFrame(rafId)\n      }\n\n      const wasm = wasmState.value\n      wasm._initialize(width, height, size, Date.now() % 10000)\n      console.log(\"Initialize done\")\n\n      const outputImageBufferOffset = wasm._getVisualizeBufferOffset() \n      const outImageData = new ImageData(new Uint8ClampedArray(wasm.HEAPU8.slice(outputImageBufferOffset, outputImageBufferOffset + width * size * height * size * 4)), width * size, height * size)\n      const canvas = canvasRef.current\n      canvas.getContext('2d')!.putImageData(outImageData, 0, 0)\n\n      // const inputBufferOffset = wasm._getInputBufferOffset()\n      // console.log(new Uint8ClampedArray(wasm.HEAPU8.slice(inputBufferOffset, inputBufferOffset + width * height)))\n      // console.log(new Uint8ClampedArray(wasm.HEAPU8.slice(outputImageBufferOffset, outputImageBufferOffset + width * height * 4)))\n\n      const render = () => {\n        if (!wasmState.value) return\n        const wasm = wasmState.value\n        const start = performance.now()\n        wasmState.value!._exec(width, height, size)\n        const outImageData = new ImageData(new Uint8ClampedArray(wasm.HEAPU8.slice(outputImageBufferOffset, outputImageBufferOffset + width * size * height * size * 4)), width * size, height * size)\n        canvasRef.current?.getContext('2d')?.putImageData(outImageData, 0, 0)\n        // console.log(dur)\n        const stop = performance.now()\n        const dur2 = stop - start\n        setDuration(dur2)\n        setRafId(requestAnimationFrame(render))\n      }\n      setRafId(requestAnimationFrame(render))\n    }\n    // eslint-disable-next-line\n  }, [width, height, wasmState, canvasRef])\n\n  return (\n    <div className=\"App\">\n      <div>\n        <select onChange={ev => {\n          const val = ev.target.value\n          const xPos = val.indexOf(\"x\")\n          const w = parseInt(val.substring(0, xPos))\n          const h = parseInt(val.substring(xPos + 1))\n          console.log(w, h)\n          setWidth(w)\n          setHeight(h)\n        }}>\n          <option selected>512x512</option>\n          <option>1024x1024</option>\n          <option>2048x2048</option>\n          <option>4096x4096</option>\n        </select>\n        <span>{duration.toFixed(3)} ms</span>\n      </div>\n      <canvas ref={canvasRef} width={width * size} height={height * size}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}